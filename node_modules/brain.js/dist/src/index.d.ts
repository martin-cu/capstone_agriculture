import * as activation from './activation';
import CrossValidate from './cross-validate';
import { FeedForward } from './feed-forward';
import * as layer from './layer';
import { likely } from './likely';
import { NeuralNetwork } from './neural-network';
import { NeuralNetworkGPU } from './neural-network-gpu';
import * as praxis from './praxis';
import { Recurrent } from './recurrent';
import { GRU } from './recurrent/gru';
import { GRUTimeStep } from './recurrent/gru-time-step';
import { LSTM } from './recurrent/lstm';
import { LSTMTimeStep } from './recurrent/lstm-time-step';
import { RNN } from './recurrent/rnn';
import { RNNTimeStep } from './recurrent/rnn-time-step';
import { TrainStream } from './train-stream';
import { DataFormatter } from './utilities/data-formatter';
import { max } from './utilities/max';
import { mse } from './utilities/mse';
import { ones, ones2D } from './utilities/ones';
import * as random from './utilities/random';
import { randomWeight } from './utilities/random-weight';
import { randos } from './utilities/randos';
import { range } from './utilities/range';
import { toArray } from './utilities/to-array';
import { toSVG } from './utilities/to-svg';
import { zeros } from './utilities/zeros';
export declare const brain: {
    activation: typeof activation;
    CrossValidate: typeof CrossValidate;
    likely: typeof likely;
    layer: typeof layer;
    layerTypes: {
        Activation: typeof import("./layer/activation").Activation;
        Internal: typeof import("./layer/internal").Internal;
        InternalModel: typeof import("./layer/types").InternalModel;
        EntryPoint: typeof import("./layer/types").EntryPoint;
        Filter: typeof import("./layer/filter").Filter;
        Model: typeof import("./layer/types").Model;
        Modifier: typeof import("./layer/modifier").Modifier;
        Operator: typeof import("./layer/operator").Operator;
        Target: typeof layer.Target;
    };
    lookup: {
        toTable(hashes: import("./lookup").INumberHash[]): import("./lookup").INumberHash;
        toTable2D(objects2D: import("./lookup").INumberHash[][]): import("./lookup").INumberHash;
        toInputTable2D(data: {
            input: {
                [key: string]: number;
            }[];
        }[]): import("./lookup").INumberHash;
        toOutputTable2D(data: {
            output: {
                [key: string]: number;
            }[];
        }[]): import("./lookup").INumberHash;
        toHash(hash: import("./lookup").INumberHash): import("./lookup").INumberHash;
        toArray(lookup: import("./lookup").INumberHash, object: import("./lookup").INumberHash, arrayLength: number): Float32Array;
        toArrayShort(lookup: import("./lookup").INumberHash, object: import("./lookup").INumberHash): Float32Array;
        toArrays(lookup: import("./lookup").INumberHash, objects: import("./lookup").INumberHash[], arrayLength: number): Float32Array[];
        toObject(lookup: import("./lookup").INumberHash, array: number[] | Float32Array): import("./lookup").INumberHash;
        toObjectPartial(lookup: import("./lookup").INumberHash, array: number[] | Float32Array, offset?: number, limit?: number): import("./lookup").INumberHash;
        dataShape(data: number | import("./lookup").INumberArray | Partial<import("./lookup").INumberHash> | import("./lookup").ITrainingDatum | import("./lookup").InputOutputValue[] | import("./lookup").FormattableData[]): string[];
        addKeys(value: number[] | import("./lookup").INumberHash, table: import("./lookup").INumberHash): import("./lookup").INumberHash;
    };
    praxis: typeof praxis;
    FeedForward: typeof FeedForward;
    NeuralNetwork: typeof NeuralNetwork;
    NeuralNetworkGPU: typeof NeuralNetworkGPU;
    Recurrent: typeof Recurrent;
    TrainStream: typeof TrainStream;
    recurrent: {
        RNNTimeStep: typeof RNNTimeStep;
        LSTMTimeStep: typeof LSTMTimeStep;
        GRUTimeStep: typeof GRUTimeStep;
        RNN: typeof RNN;
        LSTM: typeof LSTM;
        GRU: typeof GRU;
    };
    utilities: {
        max: typeof max;
        mse: typeof mse;
        ones: typeof ones;
        ones2D: typeof ones2D;
        random: typeof random;
        randomWeight: typeof randomWeight;
        randos: typeof randos;
        range: typeof range;
        toArray: typeof toArray;
        DataFormatter: typeof DataFormatter;
        zeros: typeof zeros;
        toSVG: typeof toSVG;
    };
};
declare global {
    interface Window {
        brain: typeof brain;
    }
}
export default brain;
//# sourceMappingURL=index.d.ts.map